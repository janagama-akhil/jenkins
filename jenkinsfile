pipeline {
	agent any
		stages {
			stage ('checkout') {
				steps {
					git 'https://github.com/janagama-akhil/jenkins.git'
					}
				}
				stage('build') {
					steps {
					sh 'mvn -f spring-boot-samples/spring-boot-sample-atmosphere/pom.xml clean package'
					}
				}
				stage('archive') {
					steps {
					archiveArtifacts artifacts: 'spring-boot-samples/spring-boot-sample-atmosphere/target/*.?ar', followSymlinks: false
					}
				}
				stage('unit tests') {
					steps {
					junit 'spring-boot-samples/spring-boot-sample-atmosphere/target/surefire-reports/*.xml'
					}
				}
      stage('artifact nexus uploader') {
				steps {
					  nexusArtifactUploader artifacts: [[artifactId: 'spring-boot-samples',
			      classifier: '', file: 'spring-boot-samples/spring-boot-sample-atmosphere/target/spring-boot-sample-atmosphere-1.4.0.RELEASE.jar', 
            type: 'spring-boot-samples/spring-boot-sample-atmosphere/target/spring-boot-sample-atmosphere-1.4.0.RELEASE.jar']],
					  credentialsId: 'nexusid',
					  groupId: 'org.springframework.boot',
					  nexusUrl: '3.134.83.73:8081/nexus',
					  nexusVersion: 'nexus2',
					  protocol: 'http',
					  repository: 'releases',
					  version: "4.2.${BUILD_NUMBER}"
				}
			}

          stage('Deploy') {
          		input {
               		message "Should we continue?"
               		ok "Yes, we should."
            		}
           		steps {
           			checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ansible']], submoduleCfg: [], 
        			userRemoteConfigs: [[url: 'https://github.com/janagama-akhil/tomcat-jenkins.git']]])
                  
				withCredentials([string(credentialsId: 'ansi_vault_pass', variable: 'MYPASS')]) {
        			sh '''
                    	    
			      echo $MYPASS
						echo $MYPASS > ~/.vault_pass.txt
						export ANSIBLE_VAULT_PASSWORD_FILE=~/.vault_pass.txt
						cd ansible
						sudo ansible-playbook -i production -e "BUILD_NO=${BUILD_NUMBER}" site.yml        
			          
				 '''
				}
				
           		    }
			}
		}

post {
		always {
			notify('started')
		}
		failure {
			notify('err')
		}
		success {
			notify('success')
		}
	}
}


def notify(status) {
			emailext (
				to: 'udu6767@gmail.com',
			    subject: "${status}: JOB:'${env.JOB_NAME} job ${env.JOB_ID}: ${env.JENKINS_HOME}: ${env.BUILD_ID}: --${status}'",
				body: "Please go to ${BUILD_URL} and verify the build"
			)
		}
